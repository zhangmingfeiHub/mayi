<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.mfzhang.mayi</groupId>
	<artifactId>mayi-parent</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>Mayi Parent</name>
	
	<modules>
		<module>mayi-common</module>
		<module>mayi-datasource-api</module>
		<module>mayi-datasource-service</module>
		<module>mayi-dubbo-provider</module>
		<module>mayi-dubbo-consumer</module>
		<module>mayi-dubbo-provider-api</module>
		<module>mayi-dubbo-consumer-api</module>
		<module>mayi-maven</module>
		<module>myi-job-web</module>
		<!-- <module>mayi-ynf-ms</module> -->
	</modules>
	
	<properties>
		<!-- 设置默认编码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	
		<maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<tomcat7-maven-plugin.version>2.2</tomcat7-maven-plugin.version>
		<jdk.version>1.8</jdk.version>
	
		<spring.version>5.0.1.RELEASE</spring.version>
		<junit.version>4.12</junit.version>
		<hamcrest-core.version>1.3</hamcrest-core.version>
		<mockito-core.version>2.11.0</mockito-core.version>
		<mysql.version>6.0.6</mysql.version>
		<druid.version>1.0.31</druid.version>
		<slf4j.api.version>1.7.25</slf4j.api.version>
		<log4j.version>1.2.17</log4j.version>
		<mybatis.version>3.4.4</mybatis.version>
		<mybatis.spring.version>1.3.1</mybatis.spring.version>
		<mybatis.generator.core.version>1.3.5</mybatis.generator.core.version>
		<jackson.version>2.9.0</jackson.version>
		<javax.servlet.version>3.1.0</javax.servlet.version>
		<javaee.version>7.0</javaee.version>
		<alibaba.dubbo.version>2.5.5</alibaba.dubbo.version>
		<!-- annotation验证jar -->
		<validation.api.version>2.0.0.Final</validation.api.version>
		<hibernate.validator.version>6.0.2.Final</hibernate.validator.version>
		<javax.el.api.version>3.0.0</javax.el.api.version>
		<javax.el.version>2.2.6</javax.el.version>
		<!-- quartz 定时任务 -->
		<quartz.version>2.3.0</quartz.version>
	</properties>
	
	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<env>dev</env>
			</properties>
		</profile>
		<profile>
			<id>uat</id>
			<properties>
				<env>uat</env>
			</properties>
		</profile>
		<profile>
			<id>home</id>
			<properties>
				<env>home</env>
			</properties>
		</profile>
		<profile>
			<id>company</id>
			<properties>
				<env>company</env>
			</properties>
		</profile>
	</profiles>
	
	<dependencyManagement>
		<dependencies>
			<!-- 引入自己工程内的jar -->
			<dependency>
			    <groupId>${project.groupId}</groupId>
			    <artifactId>mayi-datasource-api</artifactId>
			    <version>${project.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>${project.groupId}</groupId>
			    <artifactId>mayi-common</artifactId>
			    <version>${project.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>${project.groupId}</groupId>
			    <artifactId>mayi-dubbo-provider-api</artifactId>
			    <version>${project.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>${project.groupId}</groupId>
			    <artifactId>mayi-dubbo-consumer-api</artifactId>
			    <version>${project.version}</version> <!-- ${} 引用 -->
			</dependency>
			
			<!-- spring jar -->
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-core</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-context</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-beans</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-web</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-webmvc</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-test</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-jdbc</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-context-support</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-tx</artifactId>
			    <version>${spring.version}</version> <!-- ${} 引用 -->
			</dependency>
			
			<!-- test jar -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
			    <groupId>org.hamcrest</groupId>
			    <artifactId>hamcrest-core</artifactId>
			    <version>${hamcrest-core.version}</version>
			    <scope>test</scope>
			</dependency>
			<dependency>
			    <groupId>org.mockito</groupId>
			    <artifactId>mockito-core</artifactId>
			    <version>${mockito-core.version}</version>
			    <scope>test</scope>
			</dependency>
			
			<!-- db jar -->
			<dependency>
			    <groupId>mysql</groupId>
			    <artifactId>mysql-connector-java</artifactId>
			    <version>${mysql.version}</version>
			</dependency>
			<dependency>
			    <groupId>com.alibaba</groupId>
			    <artifactId>druid</artifactId>
			    <version>${druid.version}</version>
			</dependency>
			
			<!-- log jar -->
			<dependency>
			    <groupId>org.slf4j</groupId>
			    <artifactId>slf4j-api</artifactId>
			    <version>${slf4j.api.version}</version>
			</dependency>
			<dependency>
			    <groupId>log4j</groupId>
			    <artifactId>log4j</artifactId>
			    <version>${log4j.version}</version>
			</dependency>
			<dependency>
			    <groupId>org.slf4j</groupId>
			    <artifactId>slf4j-log4j12</artifactId>
			    <version>${slf4j.api.version}</version>
			</dependency>
			
			<!-- mybatis jar -->
			<dependency>
			    <groupId>org.mybatis</groupId>
			    <artifactId>mybatis</artifactId>
			    <version>${mybatis.version}</version>
			</dependency>
			<dependency>
			    <groupId>org.mybatis</groupId>
			    <artifactId>mybatis-spring</artifactId>
			    <version>${mybatis.spring.version}</version>
			</dependency>
			<dependency>
			    <groupId>org.mybatis.generator</groupId>
			    <artifactId>mybatis-generator-core</artifactId>
			    <version>${mybatis.generator.core.version}</version>
			</dependency>
			
			<!-- jackson json -->
			<dependency>
			    <groupId>com.fasterxml.jackson.core</groupId>
			    <artifactId>jackson-databind</artifactId>
			    <version>${jackson.version}</version>
			</dependency>
			
			<!-- javax servlet -->
			<dependency>
			    <groupId>javax.servlet</groupId>
			    <artifactId>javax.servlet-api</artifactId>
			    <version>${javax.servlet.version}</version>
			    <scope>provided</scope> <!-- 该包只在编译和测试的时候用 -->
			</dependency>
			<dependency>
			    <groupId>javax</groupId>
			    <artifactId>javaee-api</artifactId>
			    <version>${javaee.version}</version>
			    <scope>provided</scope>
			</dependency>
			
			<!-- alibaba dubbo jar -->
			<dependency>
			    <groupId>com.alibaba</groupId>
			    <artifactId>dubbo</artifactId>
			    <version>${alibaba.dubbo.version}</version>
			</dependency>
			
			<!-- 验证jar -->
			<dependency>
			    <groupId>javax.validation</groupId>
			    <artifactId>validation-api</artifactId>
			    <version>${validation.api.version}</version>
			</dependency>
			<dependency>
			    <groupId>org.hibernate</groupId>
			    <artifactId>hibernate-validator</artifactId>
			    <version>${hibernate.validator.version}</version>
			</dependency>
			<dependency>
			    <groupId>javax.el</groupId>
			    <artifactId>javax.el-api</artifactId>
			    <version>${javax.el.api.version}</version>
			</dependency>
			<dependency>
			    <groupId>org.glassfish.web</groupId>
			    <artifactId>javax.el</artifactId>
			    <version>${javax.el.version}</version>
			</dependency>
			
			<!-- quartz 定时任务 -->
			<dependency>
			    <groupId>org.quartz-scheduler</groupId>
			    <artifactId>quartz</artifactId>
			    <version>${quartz.version}</version>
			</dependency>
			<dependency>
			    <groupId>org.quartz-scheduler</groupId>
			    <artifactId>quartz-jobs</artifactId>
			    <version>${quartz.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<build>
		<!-- 项目打包输出文件的名称 默认${project.artifactId}-${project.version} -->
		<finalName>${project.artifactId}-${project.version}</finalName>
		
		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>**/config/**</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${basedir}/src/main/resources/config/${env}</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.outputDirectory}</targetPath>
			</resource>
		</resources>
	
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-compiler-plugin</artifactId>
				    <version>${maven-compiler-plugin.version}</version>
				    <configuration> <!-- 插件的全局配置，所有的插件目标的任务都会使用这些配置 -->
				    	<source>${jdk.version}</source>
				    	<target>${jdk.version}</target>
				    </configuration>
				</plugin>
				
				<!-- 打源码包插件 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-source-plugin</artifactId>
				    <version>${maven-source-plugin.version}</version>
				    <executions> <!-- 插件执行的配置 -->
				    	<execution> <!-- 执行任务，可以有多个。插件目标自定义绑定到生命周期的某个阶段 -->
				    		<id>mfzhang-exe-1</id> <!-- id 自定义 -->
				    		<phase>verify</phase> <!-- maven的 default 生命周期 verify阶段 -->
				    		<goals>
				    			<goal>jar-no-fork</goal> <!-- 插件目标，可以配置多个 -->
				    		</goals>
				    	</execution>
				    </executions>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-antrun-plugin</artifactId>
				    <version>${maven-antrun-plugin.version}</version>
				    <executions>
				    	<execution>
				    		<id>mfzhang-ant-verify</id>
				    		<phase>verify</phase>
				    		<goals>
				    			<goal>run</goal>
				    		</goals>
				    		<configuration> <!-- 特定执行的任务配置 -->
				    			<target>
				    				<echo>target: ant's bound to verify</echo>
				    			</target>
				    			<!-- <tasks> 该标签过期了，用target标签替代
				    				<echo>tasks: ant's bound to verify</echo>
				    			</tasks> -->
				    		</configuration>
				    	</execution>
				    	<!-- <execution>
				    		<id>mfzhang-ant-verfiy</id>
				    		<phase>verify</phase>
				    		<goals>
				    			<goal>run</goal>
				    		</goals>
				    		<configuration>
				    			<tasks>
				    				<echo>ant's bound to verify</echo>
				    			</tasks>
				    		</configuration>
				    	</execution> -->
				    </executions>
				</plugin>
				
				<!-- tomcat -->
				<plugin>
		          	<groupId>org.apache.tomcat.maven</groupId>
		          	<artifactId>tomcat7-maven-plugin</artifactId>
		          	<version>${tomcat7-maven-plugin.version}</version>
		        </plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>